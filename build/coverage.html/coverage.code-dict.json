{"/home/travis/build/npmtest/node-npmtest-sass-loader/test.js":"/* istanbul instrument in package npmtest_sass_loader */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sass-loader/lib.npmtest_sass_loader.js":"/* istanbul instrument in package npmtest_sass_loader */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_sass_loader = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_sass_loader = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-sass-loader/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-sass-loader && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_sass_loader */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_sass_loader\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_sass_loader.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_sass_loader.rollup.js'] =\n            local.assetsDict['/assets.npmtest_sass_loader.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_sass_loader.__dirname + '/lib.npmtest_sass_loader.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sass-loader/node_modules/sass-loader/lib/loader.js":"\"use strict\";\n\nconst sass = require(\"node-sass\");\nconst path = require(\"path\");\nconst async = require(\"async\");\nconst formatSassError = require(\"./formatSassError\");\nconst webpackImporter = require(\"./webpackImporter\");\nconst normalizeOptions = require(\"./normalizeOptions\");\nconst pify = require(\"pify\");\n\n// This queue makes sure node-sass leaves one thread available for executing\n// fs tasks when running the custom importer code.\n// This can be removed as soon as node-sass implements a fix for this.\nconst threadPoolSize = process.env.UV_THREADPOOL_SIZE || 4;\nconst asyncSassJobQueue = async.queue(sass.render, threadPoolSize - 1);\n\n/**\n * The sass-loader makes node-sass available to webpack modules.\n *\n * @this {LoaderContext}\n * @param {string} content\n */\nfunction sassLoader(content) {\n    const callback = this.async();\n    const isSync = typeof callback !== \"function\";\n    const self = this;\n    const resourcePath = this.resourcePath;\n\n    function addNormalizedDependency(file) {\n        // node-sass returns POSIX paths\n        self.dependency(path.normalize(file));\n    }\n\n    if (isSync) {\n        throw new Error(\"Synchronous compilation is not supported anymore. See https://github.com/webpack-contrib/sass-loader/issues/333\");\n    }\n\n    this.cacheable();\n\n    const options = normalizeOptions(this, content, webpackImporter(\n        resourcePath,\n        pify(this.resolve.bind(this)),\n        addNormalizedDependency\n    ));\n\n    // Skip empty files, otherwise it will stop webpack, see issue #21\n    if (options.data.trim() === \"\") {\n        callback(null, \"\");\n        return;\n    }\n\n    // start the actual rendering\n    asyncSassJobQueue.push(options, (err, result) => {\n        if (err) {\n            formatSassError(err, this.resourcePath);\n            err.file && this.dependency(err.file);\n            callback(err);\n            return;\n        }\n\n        if (result.map && result.map !== \"{}\") {\n            result.map = JSON.parse(result.map);\n            // result.map.file is an optional property that provides the output filename.\n            // Since we don't know the final filename in the webpack build chain yet, it makes no sense to have it.\n            delete result.map.file;\n            // The first source is 'stdin' according to node-sass because we've used the data input.\n            // Now let's override that value with the correct relative path.\n            // Since we specified options.sourceMap = path.join(process.cwd(), \"/sass.map\"); in normalizeOptions,\n            // we know that this path is relative to process.cwd(). This is how node-sass works.\n            result.map.sources[0] = path.relative(process.cwd(), resourcePath);\n            // node-sass returns POSIX paths, that's why we need to transform them back to native paths.\n            // This fixes an error on windows where the source-map module cannot resolve the source maps.\n            // @see https://github.com/webpack-contrib/sass-loader/issues/366#issuecomment-279460722\n            result.map.sourceRoot = path.normalize(result.map.sourceRoot);\n            result.map.sources = result.map.sources.map(path.normalize);\n        } else {\n            result.map = null;\n        }\n\n        result.stats.includedFiles.forEach(addNormalizedDependency);\n        callback(null, result.css.toString(), result.map);\n    });\n}\n\nmodule.exports = sassLoader;\n","/home/travis/build/npmtest/node-npmtest-sass-loader/node_modules/sass-loader/lib/formatSassError.js":"\"use strict\";\n\nconst path = require(\"path\");\nconst os = require(\"os\");\nconst fs = require(\"fs\");\n\n// A typical sass error looks like this\nconst SassError = { // eslint-disable-line no-unused-vars\n    message: \"invalid property name\",\n    column: 14,\n    line: 1,\n    file: \"stdin\",\n    status: 1\n};\n\n/**\n * Enhances the sass error with additional information about what actually went wrong.\n *\n * @param {SassError} err\n * @param {string} resourcePath\n */\nfunction formatSassError(err, resourcePath) {\n    // Instruct webpack to hide the JS stack from the console\n    // Usually you're only interested in the SASS stack in this case.\n    err.hideStack = true;\n\n    // The file property is missing in rare cases.\n    // No improvement in the error is possible.\n    if (!err.file) {\n        return;\n    }\n\n    let msg = err.message;\n\n    if (err.file === \"stdin\") {\n        err.file = resourcePath;\n    }\n    // node-sass returns UNIX-style paths\n    err.file = path.normalize(err.file);\n\n    // The 'Current dir' hint of node-sass does not help us, we're providing\n    // additional information by reading the err.file property\n    msg = msg.replace(/\\s*Current dir:\\s*/, \"\");\n\n    err.message = getFileExcerptIfPossible(err) +\n        msg.charAt(0).toUpperCase() + msg.slice(1) + os.EOL +\n        \"      in \" + err.file + \" (line \" + err.line + \", column \" + err.column + \")\";\n}\n\n/**\n * Tries to get an excerpt of the file where the error happened.\n * Uses err.line and err.column.\n *\n * Returns an empty string if the excerpt could not be retrieved.\n *\n * @param {SassError} err\n * @returns {string}\n */\nfunction getFileExcerptIfPossible(err) {\n    try {\n        const content = fs.readFileSync(err.file, \"utf8\");\n\n        return os.EOL +\n            content.split(os.EOL)[err.line - 1] + os.EOL +\n            new Array(err.column - 1).join(\" \") + \"^\" + os.EOL +\n            \"      \";\n    } catch (err) {\n        // If anything goes wrong here, we don't want any errors to be reported to the user\n        return \"\";\n    }\n}\n\nmodule.exports = formatSassError;\n","/home/travis/build/npmtest/node-npmtest-sass-loader/node_modules/sass-loader/lib/webpackImporter.js":"\"use strict\";\n\n/**\n * @name PromisedResolve\n * @type {Function}\n * @param {string} dir\n * @param {string} request\n * @returns Promise\n */\n\n/**\n * @name Importer\n * @type {Function}\n * @param {string} url\n * @param {string} prev\n * @param {Function<Error, string>} done\n */\n\nconst path = require(\"path\");\nconst utils = require(\"loader-utils\");\nconst tail = require(\"lodash.tail\");\nconst importsToResolve = require(\"./importsToResolve\");\n\nconst matchCss = /\\.css$/;\n\n/**\n * Returns an importer that uses webpack's resolving algorithm.\n *\n * It's important that the returned function has the correct number of arguments\n * (based on whether the call is sync or async) because otherwise node-sass doesn't exit.\n *\n * @param {string} resourcePath\n * @param {PromisedResolve} resolve\n * @param {Function<string>} addNormalizedDependency\n * @returns {Importer}\n */\nfunction webpackImporter(resourcePath, resolve, addNormalizedDependency) {\n    function dirContextFrom(fileContext) {\n        return path.dirname(\n            // The first file is 'stdin' when we're using the data option\n            fileContext === \"stdin\" ? resourcePath : fileContext\n        );\n    }\n\n    function startResolving(dir, importsToResolve) {\n        return importsToResolve.length === 0 ?\n            Promise.reject() :\n            resolve(dir, importsToResolve[0])\n                .then(resolvedFile => {\n                    // Add the resolvedFilename as dependency. Although we're also using stats.includedFiles, this might come\n                    // in handy when an error occurs. In this case, we don't get stats.includedFiles from node-sass.\n                    addNormalizedDependency(resolvedFile);\n                    return {\n                        // By removing the CSS file extension, we trigger node-sass to include the CSS file instead of just linking it.\n                        file: resolvedFile.replace(matchCss, \"\")\n                    };\n                }, () => startResolving(\n                    dir,\n                    tail(importsToResolve)\n                ));\n    }\n\n    return (url, prev, done) => {\n        startResolving(\n            dirContextFrom(prev),\n            importsToResolve(utils.urlToRequest(url))\n        ) // Catch all resolving errors, return the original file and pass responsibility back to other custom importers\n            .catch(() => ({ file: url }))\n            .then(done);\n    };\n}\n\nmodule.exports = webpackImporter;\n","/home/travis/build/npmtest/node-npmtest-sass-loader/node_modules/sass-loader/lib/importsToResolve.js":"\"use strict\";\n\nconst path = require(\"path\");\n\n// libsass uses this precedence when importing files without extension\nconst extPrecedence = [\".scss\", \".sass\", \".css\"];\n\n/**\n * When libsass tries to resolve an import, it uses a special algorithm.\n * Since the sass-loader uses webpack to resolve the modules, we need to simulate that algorithm. This function\n * returns an array of import paths to try.\n *\n * @param {string} request\n * @returns {Array<string>}\n */\nfunction importsToResolve(request) {\n    // libsass' import algorithm works like this:\n    // In case there is no file extension...\n    //   - Prefer modules starting with '_'.\n    //   - File extension precedence: .scss, .sass, .css.\n    // In case there is a file extension...\n    //   - If the file is a CSS-file, do not include it all, but just link it via @import url().\n    //   - The exact file name must match (no auto-resolving of '_'-modules).\n\n    // Keep in mind: ext can also be something like '.datepicker' when the true extension is omitted and the filename contains a dot.\n    // @see https://github.com/webpack-contrib/sass-loader/issues/167\n    const ext = path.extname(request);\n    const basename = path.basename(request);\n    const dirname = path.dirname(request);\n    const startsWithUnderscore = basename.charAt(0) === \"_\";\n    // a module import is an identifier like 'bootstrap-sass'\n    // We also need to check for dirname since it might also be a deep import like 'bootstrap-sass/something'\n    const isModuleImport = request.charAt(0) !== \".\" && dirname === \".\";\n    const hasCssExt = ext === \".css\";\n    const hasSassExt = ext === \".scss\" || ext === \".sass\";\n\n    return (isModuleImport && [request]) || // Do not modify module imports\n        (hasCssExt && []) || // Do not import css files\n        (hasSassExt && [request]) || // Do not modify imports with explicit extensions\n        (startsWithUnderscore ? [] : extPrecedence) // Do not add underscore imports if there is already an underscore\n            .map(ext => \"_\" + basename + ext)\n            .concat(\n                extPrecedence.map(ext => basename + ext)\n            ).map(\n                file => dirname + \"/\" + file // No path.sep required here, because imports inside SASS are usually with /\n            );\n}\n\nmodule.exports = importsToResolve;\n","/home/travis/build/npmtest/node-npmtest-sass-loader/node_modules/sass-loader/lib/normalizeOptions.js":"\"use strict\";\n\nconst os = require(\"os\");\nconst utils = require(\"loader-utils\");\nconst cloneDeep = require(\"clone-deep\");\nconst path = require(\"path\");\nconst proxyCustomImporters = require(\"./proxyCustomImporters\");\n\n/**\n * Derives the sass options from the loader context and normalizes its values with sane defaults.\n *\n * Please note: If loaderContext.query is an options object, it will be re-used across multiple invocations.\n * That's why we must not modify the object directly.\n *\n * @param {LoaderContext} loaderContext\n * @param {string} content\n * @param {Function} webpackImporter\n * @returns {Object}\n */\nfunction normalizeOptions(loaderContext, content, webpackImporter) {\n    const options = cloneDeep(utils.getOptions(loaderContext)) || {};\n    const resourcePath = loaderContext.resourcePath;\n\n    options.data = options.data ? (options.data + os.EOL + content) : content;\n\n    // opt.outputStyle\n    if (!options.outputStyle && loaderContext.minimize) {\n        options.outputStyle = \"compressed\";\n    }\n\n    // opt.sourceMap\n    // Not using the `this.sourceMap` flag because css source maps are different\n    // @see https://github.com/webpack/css-loader/pull/40\n    if (options.sourceMap) {\n        // Deliberately overriding the sourceMap option here.\n        // node-sass won't produce source maps if the data option is used and options.sourceMap is not a string.\n        // In case it is a string, options.sourceMap should be a path where the source map is written.\n        // But since we're using the data option, the source map will not actually be written, but\n        // all paths in sourceMap.sources will be relative to that path.\n        // Pretty complicated... :(\n        options.sourceMap = path.join(process.cwd(), \"/sass.map\");\n        if (\"sourceMapRoot\" in options === false) {\n            options.sourceMapRoot = process.cwd();\n        }\n        if (\"omitSourceMapUrl\" in options === false) {\n            // The source map url doesn't make sense because we don't know the output path\n            // The css-loader will handle that for us\n            options.omitSourceMapUrl = true;\n        }\n        if (\"sourceMapContents\" in options === false) {\n            // If sourceMapContents option is not set, set it to true otherwise maps will be empty/null\n            // when exported by webpack-extract-text-plugin.\n            options.sourceMapContents = true;\n        }\n    }\n\n    // indentedSyntax is a boolean flag.\n    const ext = path.extname(resourcePath);\n\n    // If we are compiling sass and indentedSyntax isn't set, automatically set it.\n    if (ext && ext.toLowerCase() === \".sass\" && \"indentedSyntax\" in options === false) {\n        options.indentedSyntax = true;\n    } else {\n        options.indentedSyntax = Boolean(options.indentedSyntax);\n    }\n\n    // Allow passing custom importers to `node-sass`. Accepts `Function` or an array of `Function`s.\n    options.importer = options.importer ? proxyCustomImporters(options.importer, resourcePath) : [];\n    options.importer.push(webpackImporter);\n\n    // `node-sass` uses `includePaths` to resolve `@import` paths. Append the currently processed file.\n    options.includePaths = options.includePaths || [];\n    options.includePaths.push(path.dirname(resourcePath));\n\n    return options;\n}\n\nmodule.exports = normalizeOptions;\n","/home/travis/build/npmtest/node-npmtest-sass-loader/node_modules/sass-loader/lib/proxyCustomImporters.js":"\"use strict\";\n\n/**\n * Creates new custom importers that use the given `resourcePath` if libsass calls the custom importer with `prev`\n * being 'stdin'.\n *\n * Why do we need this? We have to use the `data` option of node-sass in order to compile our sass because\n * the `resourcePath` might not be an actual file on disk. When using the `data` option, libsass uses the string\n * 'stdin' instead of a filename.\n *\n * We have to fix this behavior in order to provide a consistent experience to the webpack user.\n *\n * @param {function|Array<function>} importer\n * @param {string} resourcePath\n * @returns {Array<function>}\n */\nfunction proxyCustomImporters(importer, resourcePath) {\n    return [].concat(importer).map((importer) => {\n        return function (url, prev, done) {\n            return importer.apply(\n                this, // eslint-disable-line no-invalid-this\n                Array.from(arguments)\n                    .map((arg, i) => i === 1 && arg === \"stdin\" ? resourcePath : arg)\n            );\n        };\n    });\n}\n\nmodule.exports = proxyCustomImporters;\n"}